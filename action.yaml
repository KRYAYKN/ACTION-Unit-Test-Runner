name: AL SaaS Unit Test Runner
description: Runs AL tests on a Business Central SaaS Sandbox environment.

inputs:
  CONTAINERNAME:
    description: 'Proxy container name (FilesOnly)'
    required: true
  TENANT_ID:
    description: 'Azure AD Tenant ID'
    required: true
  ENVIRONMENT:
    description: 'Business Central environment name'
    required: true
  REFRESH_TOKEN:
    description: 'Refresh token for authentication'
    required: true

runs:
  using: composite
  steps:
    - name: Install and Import BcContainerHelper
      shell: pwsh
      run: |
        Install-Module BcContainerHelper -Force -AllowClobber -Scope CurrentUser
        Import-Module BcContainerHelper

    - name: Create FilesOnly Proxy Container
      shell: pwsh
      run: |
        $containerName = '${{ inputs.CONTAINERNAME }}'
        $exists = docker ps -a --format '{{.Names}}' | Where-Object { $_ -eq $containerName }
        if (-not $exists) {
          Write-Host "Creating FilesOnly container..."
          $artifactUrl = Get-BCArtifactUrl -type Sandbox -country w1
          New-BcContainer `
            -accept_eula `
            -containerName $containerName `
            -artifactUrl $artifactUrl `
            -isolation process `
            -auth NavUserPassword `
            -updateHosts `
            -shortcuts None `
            -includeAL `
            -doNotCheckHealth `
            -filesOnly
        } else {
          Write-Host "✅ Container '$containerName' already exists."
        }

    - name: Run Tests in SaaS Environment
      shell: pwsh
      run: |
        $testAppName = 'Saint-gobain Test'
        $testAppPublisher = 'pargesoft'

        $authContext = New-BcAuthContext -tenantId '${{ inputs.TENANT_ID }}' -refreshToken '${{ inputs.REFRESH_TOKEN }}'

        $testApp = Get-BcInstalledExtensions -bcAuthContext $authContext -environment '${{ inputs.ENVIRONMENT }}' |
          Where-Object { $_.DisplayName -eq $testAppName -and $_.Publisher -eq $testAppPublisher }

        if (-not $testApp) {
          Write-Error "❌ Test app '$testAppName' by publisher '$testAppPublisher' not found in the environment '${{ inputs.ENVIRONMENT }}'"
          exit 1
        }

        $sharedPath = "C:\ProgramData\BcContainerHelper\Extensions\${{ inputs.CONTAINERNAME }}\My"
        $xunitPath = Join-Path $sharedPath "TestResults.xml"

        Run-TestsInBcContainer `
          -containerName 'filesonly' `
          -bcAuthContext $authContext `
          -environment '${{ inputs.ENVIRONMENT }}' `
          -extensionId $testApp.Id `
          -detailed `
          -XUnitResultFileName $xunitPath `
          -disableSSLVerification `
          -debug


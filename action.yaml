name: "AL Unit Test Runner"
description: "Runs AL unit tests on a Business Central container and reports results"

inputs:
  container-name:
    description: "Name of the Business Central container"
    required: true
  BC_USERNAME:
    description: "Business Central username"
    required: true
  BC_PASSWORD:
    description: "Business Central password"
    required: true

runs:
  using: "composite"
  steps:
    - name: Install BcContainerHelper
      shell: powershell
      run: |
        Write-Host "Installing BcContainerHelper module..."
        [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
        Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.201 -Force
        Install-Module BcContainerHelper -Force -SkipPublisherCheck -AllowClobber
        Get-Module -ListAvailable BcContainerHelper

    - name: Check Container Status
      shell: pwsh
      run: |
        Write-Host "Checking if container '${{ inputs.container-name }}' is running..."
        docker ps -a | Select-String '${{ inputs.container-name }}'

    - name: Ensure Test Toolkit is Installed
      shell: pwsh
      run: |
        Invoke-ScriptInBcContainer -containerName "${{ inputs.container-name }}" -scriptblock {
          $testToolkit = Get-NAVAppInfo -ServerInstance BC | Where-Object { $_.Name -eq 'AI Test Toolkit' }
          if (-not $testToolkit) {
            Write-Host "Installing AI Test Toolkit..."
            Import-TestToolkitToBcContainer -containerName "${{ inputs.container-name }}" -tenant default
          } else {
            Write-Host "✅ AI Test Toolkit is already installed."
          }
        }

    - name: Ensure Test Suite Exists
      shell: pwsh
      run: |
        Invoke-ScriptInBcContainer -containerName "${{ inputs.container-name }}" -scriptblock {
          if (-not (Get-TestSuite -ServerInstance BC -Tenant default -Name "DEFAULT")) {
            Write-Host "Creating Test Suite 'DEFAULT'..."
            New-TestSuite -ServerInstance BC -Tenant default -Name "DEFAULT"
          } else {
            Write-Host "✅ Test Suite 'DEFAULT' already exists."
          }
        }

    - name: Get Tests from Container
      shell: pwsh
      run: |
        Invoke-ScriptInBcContainer -containerName "${{ inputs.container-name }}" -scriptblock {
          Write-Host "Fetching available tests from container..."
          Get-TestsFromNavContainer -containerName "${{ inputs.container-name }}" -testSuite "DEFAULT"
        }

    - name: Run AL Tests in Container
      shell: pwsh
      env:
        BC_USERNAME: ${{ inputs.BC_USERNAME }}
        BC_PASSWORD: ${{ inputs.BC_PASSWORD }}
      run: |
        Write-Host "Running AL tests in container ${{ inputs.container-name }}..."

        $securePassword = ConvertTo-SecureString $env:BC_PASSWORD -AsPlainText -Force
        $credential = New-Object PSCredential($env:BC_USERNAME, $securePassword)

        Write-Host "Executing tests with Run-TestsInNavContainer..."
        $testResults = Run-TestsInNavContainer `
          -containerName "${{ inputs.container-name }}" `
          -testSuite "DEFAULT" `
          -credential $credential `
          -detailed `
          -tenant default

        if (-not $testResults) {
          Write-Host "::error::No test results found! Please check if tests were executed correctly."
          exit 1
        }

        Write-Host "Generating JUnit XML Test Results..."
        $xml = New-Object System.Xml.XmlDocument
        $testResultsNode = $xml.CreateElement("testsuites")
        $xml.AppendChild($testResultsNode) | Out-Null

        $testsuite = $xml.CreateElement("testsuite")
        $testsuite.SetAttribute("name", "AL Test Suite")
        $testsuite.SetAttribute("tests", $testResults.TestResults.tests)
        $testsuite.SetAttribute("failures", $testResults.TestResults.failures)
        $testsuite.SetAttribute("errors", "0")
        $testsuite.SetAttribute("time", $testResults.TestResults.time)
        $testResultsNode.AppendChild($testsuite) | Out-Null

        foreach ($result in $testResults.Results) {
          $testcase = $xml.CreateElement("testcase")
          $testcase.SetAttribute("classname", $result.TestCodeunit)
          $testcase.SetAttribute("name", $result.TestFunction)
          $testcase.SetAttribute("time", $result.Duration)

          if ($result.Result -ne "Success") {
            $failure = $xml.CreateElement("failure")
            $failure.SetAttribute("message", $result.Message)
            $failure.InnerText = $result.Message
            $testcase.AppendChild($failure) | Out-Null
          }

          $testsuite.AppendChild($testcase) | Out-Null
        }

        $outputPath = "${{ github.workspace }}/TestResults.xml"
        $xml.Save($outputPath)

        if ($testResults.TestResults.failures -gt 0) {
          Write-Host "::error::$($testResults.TestResults.failures) test(s) failed"
          exit 1
        }

        Write-Host "✅ All tests passed! Total: $($testResults.TestResults.tests), Failures: $($testResults.TestResults.failures), Time: $($testResults.TestResults.time) sec"

    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      with:
        name: al-test-results
        path: ${{ github.workspace }}/TestResults.xml
        retention-days: 30

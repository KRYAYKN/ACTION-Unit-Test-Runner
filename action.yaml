name: AL Unit Test Runner

description: Runs AL unit tests on a Business Central container and reports results

inputs:
  container-name:
    description: "Name of the Business Central container"
    required: true
  BC_USERNAME:
    description: "Business Central username"
    required: true
  BC_PASSWORD:
    description: "Business Central password"
    required: true
  Build_StagingDirectory:
    description: "Path to the build staging directory."
    required: true

runs:
  using: "composite"
  steps:
    - name: Install BcContainerHelper
      shell: powershell
      run: |
        Write-Host "Installing BcContainerHelper module..."
        [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
        Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.201 -Force
        Install-Module BcContainerHelper -Force -SkipPublisherCheck -AllowClobber

    - name: Check Container Status
      shell: pwsh
      run: |
        docker ps -a | Select-String '${{ inputs.container-name }}'

    - name: Ensure Test Toolkit is Installed
      shell: pwsh
      run: |
        Invoke-ScriptInBcContainer -containerName "${{ inputs.container-name }}" -scriptblock {
          $testToolkit = Get-NAVAppInfo -ServerInstance BC | Where-Object { $_.Name -eq 'Test Runner' }
          if (-not $testToolkit) {
            Write-Host "‚ö†Ô∏è Test Toolkit not found. Installing..."
            Import-TestToolkitToBcContainer -containerName "${{ inputs.container-name }}"
            Write-Host "‚úÖ Test Toolkit installed successfully."
          } else {
            Write-Host "‚úÖ Test Toolkit is already installed."
          }
        }

    - name: Publish Test App
      shell: pwsh
      run: |
        $testApp = Get-ChildItem -Path "${{ inputs.Build_StagingDirectory }}" -Recurse -Filter '*Test*.app' | Select-Object -First 1

        if (-not $testApp) {
          Write-Host "‚ùå Test .app dosyasƒ± bulunamadƒ±!"
          exit 1
        }

        Write-Host "‚úÖ Test app bulundu: $($testApp.FullName)"

        $password = ConvertTo-SecureString "${{ inputs.BC_PASSWORD }}" -AsPlainText -Force
        $credential = New-Object System.Management.Automation.PSCredential ("${{ inputs.BC_USERNAME }}", $password)

        Publish-BcContainerApp -containerName "${{ inputs.container-name }}" `
          -credential $credential `
          -appFile $testApp.FullName `
          -sync -install -SkipVerification

    - name: Validate App Installation & Debug Info
      shell: pwsh
      run: |
        Write-Host "üì¶ Yayƒ±nlanan uygulamalar:"
        Get-BcContainerAppInfo -containerName "${{ inputs.container-name }}" | Format-Table Name, Publisher, Version, IsInstalled, IsPublished

    - name: Run AL Tests
      shell: pwsh
      run: |
        $password = ConvertTo-SecureString "${{ inputs.BC_PASSWORD }}" -AsPlainText -Force
        $credential = New-Object System.Management.Automation.PSCredential ("${{ inputs.BC_USERNAME }}", $password)

        $testResults = Run-TestsInBcContainer -containerName "${{ inputs.container-name }}" `
          -credential $credential -detailed -tenant default `
          -XUnitResultFileName "$env:GITHUB_WORKSPACE/TestResults.xml"

        if (-not $testResults -or $testResults.Count -eq 0) {
          Write-Host "::error::Hi√ß test sonucu d√∂nd√ºr√ºlmedi! Test app'inde test fonksiyonlarƒ± var mƒ±?"
          exit 1
        }

        $successCount = ($testResults | Where-Object { $_.Result -eq "Success" }).Count
        $failureCount = ($testResults | Where-Object { $_.Result -eq "Failure" }).Count
        $skippedCount = ($testResults | Where-Object { $_.Result -eq "Skipped" }).Count

        Write-Host "üìä Test sonu√ßlarƒ±:"
        Write-Host "- Ba≈üarƒ±lƒ±: $successCount"
        Write-Host "- Ba≈üarƒ±sƒ±z: $failureCount"
        Write-Host "- Atlanmƒ±≈ü: $skippedCount"

        if ($failureCount -gt 0) {
          Write-Host "::error::$failureCount test ba≈üarƒ±sƒ±z oldu!"
          exit 1
        } else {
          Write-Host "‚úÖ Tests completed successfully."
        }

    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: al-test-results
        path: ${{ github.workspace }}/TestResults.xml
        retention-days: 30
